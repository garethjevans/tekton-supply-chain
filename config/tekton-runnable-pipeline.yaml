---
apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  name: tekton-runnable-pipeline
spec:
  urlPath: .status.outputs.url
  revisionPath: .status.outputs.revision

  healthRule:
    singleConditionType: Ready

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def merged_tekton_params():
    #@   params = []
    #@   if hasattr(data.values, "params") and hasattr(data.values.params, "testing_pipeline_params"):
    #@     for param in data.values.params["testing_pipeline_params"]:
    #@       params.append({ "name": param, "value": data.values.params["testing_pipeline_params"][param] })
    #@     end
    #@   end
    #@   params.append({ "name": "source-url", "value": data.values.source.url })
    #@   params.append({ "name": "source-revision", "value": data.values.source.revision })
    #@   if hasattr(data.values.workload.spec.source, "subPath"):
    #@     params.append({ "name": "sub-path", "value": data.values.workload.spec.source.subPath })
    #@   end
    #@   return params
    #@ end
    ---
    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-pipeline"
      labels: #@ merge_labels({})
    spec:
      #@ if/end hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName

      runTemplateRef:
        name: tekton-cluster-run-template-pipeline
        kind: ClusterRunTemplate

      inputs: 
        tekton-params: #@ merged_tekton_params()
